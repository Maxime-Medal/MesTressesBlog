// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241005000120_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassroomStudent", b =>
                {
                    b.Property<int>("ClassroomsId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassroomsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ClassroomStudent");
                });

            modelBuilder.Entity("CompetenceGrade", b =>
                {
                    b.Property<int>("CompetencesId")
                        .HasColumnType("integer");

                    b.Property<int>("GradesId")
                        .HasColumnType("integer");

                    b.HasKey("CompetencesId", "GradesId");

                    b.HasIndex("GradesId");

                    b.ToTable("CompetenceGrade");
                });

            modelBuilder.Entity("CompetenceStudent", b =>
                {
                    b.Property<int>("CompetencesId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("CompetencesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CompetenceStudent");
                });

            modelBuilder.Entity("Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("DomainId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DomainId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Data.Models.ArticleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ArticleTranslations");
                });

            modelBuilder.Entity("Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Data.Models.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoriesTranslations");
                });

            modelBuilder.Entity("Data.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Data.Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DomainId")
                        .HasColumnType("integer");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DomainId");

                    b.HasIndex("LevelId");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("Data.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string[]>("FilePath")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Data.Models.DocumentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DocumentTranslations");
                });

            modelBuilder.Entity("Data.Models.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("Data.Models.DomainTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DomainId")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DomainTranslation");
                });

            modelBuilder.Entity("Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Data.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Data.Models.LevelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelTranslations");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Data.Models.StudentClassroom", b =>
                {
                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassroom");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLogged")
                        .HasColumnType("boolean");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PictureFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassroomStudent", b =>
                {
                    b.HasOne("Data.Models.Classroom", null)
                        .WithMany()
                        .HasForeignKey("ClassroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceGrade", b =>
                {
                    b.HasOne("Data.Models.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceStudent", b =>
                {
                    b.HasOne("Data.Models.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Article", b =>
                {
                    b.HasOne("Data.Models.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Data.Models.Domain", "Domain")
                        .WithMany("Articles")
                        .HasForeignKey("DomainId");

                    b.HasOne("Data.Models.Level", "Level")
                        .WithMany("Articles")
                        .HasForeignKey("LevelId");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("ArticleId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ArticleId");

                            b1.ToTable("Articles");

                            b1.WithOwner()
                                .HasForeignKey("ArticleId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Domain");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.ArticleTranslation", b =>
                {
                    b.HasOne("Data.Models.Article", "Article")
                        .WithMany("Translations")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("ArticleTranslations")
                        .HasForeignKey("LanguageId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("ArticleTranslationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ArticleTranslationId");

                            b1.ToTable("ArticleTranslations");

                            b1.WithOwner()
                                .HasForeignKey("ArticleTranslationId");
                        });

                    b.Navigation("Article");

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Data.Models.Category", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("CategoryId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.CategoryTranslation", b =>
                {
                    b.HasOne("Data.Models.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("CategoryTranslationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("CategoryTranslationId");

                            b1.ToTable("CategoriesTranslations");

                            b1.WithOwner()
                                .HasForeignKey("CategoryTranslationId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Data.Models.Classroom", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("ClassroomId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ClassroomId");

                            b1.ToTable("Classrooms");

                            b1.WithOwner()
                                .HasForeignKey("ClassroomId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.HasOne("Data.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("CommentId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comments");

                            b1.WithOwner()
                                .HasForeignKey("CommentId");
                        });

                    b.Navigation("Article");

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Competence", b =>
                {
                    b.HasOne("Data.Models.Category", "Category")
                        .WithMany("Competences")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Data.Models.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("Data.Models.Level", "Level")
                        .WithMany("Competences")
                        .HasForeignKey("LevelId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("CompetenceId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("CompetenceId");

                            b1.ToTable("Competence");

                            b1.WithOwner()
                                .HasForeignKey("CompetenceId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Domain");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Data.Models.Document", b =>
                {
                    b.HasOne("Data.Models.Article", "Article")
                        .WithMany("Documents")
                        .HasForeignKey("ArticleId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("DocumentId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("DocumentId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentId");
                        });

                    b.Navigation("Article");

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DocumentTranslation", b =>
                {
                    b.HasOne("Data.Models.Document", "Document")
                        .WithMany("DocumentTranslations")
                        .HasForeignKey("DocumentId");

                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("DocumentTranslations")
                        .HasForeignKey("LanguageId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("DocumentTranslationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("DocumentTranslationId");

                            b1.ToTable("DocumentTranslations");

                            b1.WithOwner()
                                .HasForeignKey("DocumentTranslationId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Data.Models.Domain", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("DomainId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("DomainId");

                            b1.ToTable("Domain");

                            b1.WithOwner()
                                .HasForeignKey("DomainId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DomainTranslation", b =>
                {
                    b.HasOne("Data.Models.Domain", "Domain")
                        .WithMany("DomainTranslations")
                        .HasForeignKey("DomainId");

                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("DomainTranslations")
                        .HasForeignKey("LanguageId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("DomainTranslationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("DomainTranslationId");

                            b1.ToTable("DomainTranslation");

                            b1.WithOwner()
                                .HasForeignKey("DomainTranslationId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Data.Models.Grade", b =>
                {
                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("GradeId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("GradeId");

                            b1.ToTable("Grades");

                            b1.WithOwner()
                                .HasForeignKey("GradeId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Models.Language", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("LanguageId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("LanguageId");

                            b1.ToTable("Languages");

                            b1.WithOwner()
                                .HasForeignKey("LanguageId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Level", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("LevelId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("LevelId");

                            b1.ToTable("Levels");

                            b1.WithOwner()
                                .HasForeignKey("LevelId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.LevelTranslation", b =>
                {
                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("LevelTranslations")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Data.Models.Level", "Level")
                        .WithMany("LevelTranslations")
                        .HasForeignKey("LevelId");

                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("LevelTranslationId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("LevelTranslationId");

                            b1.ToTable("LevelTranslations");

                            b1.WithOwner()
                                .HasForeignKey("LevelTranslationId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("RoleId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("RoleId");

                            b1.ToTable("Roles");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.OwnsOne("Data.Models.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<int>("StudentId")
                                .HasColumnType("integer");

                            b1.Property<int?>("CreateByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("ModifyByUserId")
                                .HasColumnType("integer")
                                .HasColumnName("ModifiedBy");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("BaseInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.StudentClassroom", b =>
                {
                    b.HasOne("Data.Models.Classroom", "Classroom")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.Student", "Student")
                        .WithMany("StudentClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.HasOne("Data.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Language");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Models.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Documents");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Data.Models.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("Competences");
                });

            modelBuilder.Entity("Data.Models.Classroom", b =>
                {
                    b.Navigation("StudentClassrooms");
                });

            modelBuilder.Entity("Data.Models.Document", b =>
                {
                    b.Navigation("DocumentTranslations");
                });

            modelBuilder.Entity("Data.Models.Domain", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("DomainTranslations");
                });

            modelBuilder.Entity("Data.Models.Language", b =>
                {
                    b.Navigation("ArticleTranslations");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("DocumentTranslations");

                    b.Navigation("DomainTranslations");

                    b.Navigation("LevelTranslations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Level", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Competences");

                    b.Navigation("LevelTranslations");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Student", b =>
                {
                    b.Navigation("StudentClassrooms");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
